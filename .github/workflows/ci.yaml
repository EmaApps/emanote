name: "CI"
on:
  # Run only when pushing to master branch
  push:
    branches:
      - master
      - nix-bundle
jobs:

  # Do all nix builds (including the bundle), and then push to cachix.
  # Then, expect other jobs pull from cache.
  cached:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v13
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install
          install_options: "--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve"
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/cachix-action@v10
        with:
          name: srid
          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
          # Only needed for private caches
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Build and cache 
        run: |
          # Run all nix commands we run latter, to cache their outputs.
          nix-build -j 4 docker.nix --no-out-link
          nix bundle .
          rm ./emanote
          nix run . -- --version

  bundle:
    needs: cached
    runs-on: ubuntu-latest
    steps:
      # TODO: DRY
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v13
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install
          install_options: "--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve"
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/cachix-action@v10
        with:
          name: srid
          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
      - name: Release bundle
        id: release-bundle
        # if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -x
          nix bundle .
          ./emanote --version
          du -sh -D ./emanote
          # export VER=${{ github.event.release.tag_name }}
          export VER=$(git describe --always)
          export BUNDLEFILE=emanote-${VER}.gz
          gzip -c -N -9 ./emanote > ./${BUNDLEFILE}
          du -sh ./${BUNDLEFILE}
          echo "::set-output name=bundle-file::${BUNDLEFILE}"
      - name: Upload release bundle
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ steps.release-bundle.outputs.bundle-file }}

  docker:
    needs: cached
    runs-on: ubuntu-latest
    env:
      DOCKERTAG: latest
    steps:
      # TODO: DRY
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v13
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install
          install_options: "--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve"
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/cachix-action@v10
        with:
          name: srid
          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
      - name: Build & Publish Docker image to Docker Hub
        # if: ${{ github.ref == env.MAINLINE && runner.os == 'Linux' }}
        run: |
          docker load -i $(nix-build -j 4 docker.nix --argstr tag "${{ env.DOCKERTAG }}")
          # docker tag "sridca/emanote:${{ env.DOCKERTAG }}" "sridca/emanote:${{env.NEURONVER}}"
          echo ${{ secrets.DOCKER_PASS }} | docker login -u sridca --password-stdin
          set -x
          docker push "sridca/emanote:${{ env.DOCKERTAG }}"
          # docker push "sridca/emanote:${{ env.EMANOTEVER }}"

  publish:
    needs: bundle
    runs-on: ubuntu-latest
    steps:
      - name: Generate website HTML ðŸ”§
        run: |
          mkdir -p ./.ci/output
          ./emanote -- --layers ./docs gen $(pwd)/.ci/output
          bash ./.ci/output/_emanote-bin/compile-css
      - name: Deploy to website to gh-pages ðŸš€
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .ci/output
          cname: note.ema.srid.ca
